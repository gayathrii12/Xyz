@Transactional(propagation = Propagation.REQUIRED)
public UpdateOpResultTO update(
        final String bizObjectName, 
        final String idValue, 
        final String[] fieldIds, 
        final String[] fieldValues, 
        final ParamTO[] params) {
    
    boolean hasPermission = SecurityHelper.isCurrentUserEntitledOnProtectedResource(
        EntitlementType.EDIT_ACCESS, AppIdsConstants.APP_SDR_MAIN);
    
    if (!hasPermission) {
        final String warn = SecurityHelper.SECURITY_MESSAGE_PREFIX + " User " + 
            SecurityHelper.getCurrentUserName() + " with readonly access";
        log.error("%s", warn);
        UpdateOpResultTO updResultTO = new UpdateOpResultTO();
        updResultTO.setValid(false);
        updResultTO.updatedRecs = 0;
        updResultTO.setGlobalMessages(new String[]{"Error occurred.", warn, "Warning"});
        throw new SecurityException(warn);
    }
    
    UpdateOpResultTO updResultTO = new UpdateOpResultTO();
    
    if (params != null && params.length > 0) {
        log.info("update Param[0] name: %s and value: %s and id: %s", 
            params[0].getName(), params[0].getValue(), idValue);
        
        if (UPDATE_TYPE.equals(params[0].getName())) {
            String updateType = params[0].getValue();
            log.info("Update type = %s", updateType);
            
            // REVIVE LOGIC - Moved inside update method
            if (REVIVE.equals(updateType)) {
                log.info("Inside REVIVE action");
                
                String userId = null;
                String userName = null;
                
                if (params.length != 3) {
                    throw new IllegalArgumentException("Expected 3 paramTOs for revive action");
                }
                
                if (USER_ID_PARAM.equals(params[1].getName())) {
                    userId = params[1].getValue();
                } else {
                    throw new IllegalArgumentException("Expected name of Params[1] is " + USER_ID_PARAM);
                }
                
                if (USER_NAME_PARAM.equals(params[2].getName())) {
                    userName = params[2].getValue();
                } else {
                    throw new IllegalArgumentException("Expected name of Params[2] is " + USER_NAME_PARAM);
                }
                
                if (fieldValues.length > 0) {
                    try {
                        log.info("Request to revive %s records", fieldValues.length);
                        
                        Session session = sessionFactory.getCurrentSession();
                        int updatedCount = 0;
                        
                        for (String wfId : fieldValues) {
                            // Execute the SQL operations as specified
                            
                            // First SQL: Update OS_WFENTRY
                            String updateWfEntrySql = "UPDATE do.OS_WFENTRY SET active = 'N' " +
                                                    "WHERE ID = (SELECT wf_id FROM sdr_activity WHERE ats_id = :wfId)";
                            
                            Query updateWfEntryQuery = session.createSQLQuery(updateWfEntrySql);
                            updateWfEntryQuery.setParameter("wfId", wfId);
                            int wfEntryUpdated = updateWfEntryQuery.executeUpdate();
                            
                            // Second SQL: Update sdr_activity
                            String updateSdrActivitySql = "UPDATE sdr_activity SET " +
                                                        "processed = 'U', " +
                                                        "wf_id = NULL, " +
                                                        "wf = NULL, " +
                                                        "processing_date = GETDATE(), " +
                                                        "last_modified = GETDATE(), " +
                                                        "last_modified_user_id = :lastModifiedUser " +
                                                        "WHERE ats_id = :wfId";
                            
                            Query updateSdrActivityQuery = session.createSQLQuery(updateSdrActivitySql);
                            updateSdrActivityQuery.setParameter("lastModifiedUser", "REVIVE-" + userId);
                            updateSdrActivityQuery.setParameter("wfId", wfId);
                            int sdrActivityUpdated = updateSdrActivityQuery.executeUpdate();
                            
                            if (wfEntryUpdated > 0 || sdrActivityUpdated > 0) {
                                updatedCount++;
                            }
                            
                            log.info("Revive operation completed for wfId: %s, wfEntry updated: %d, sdrActivity updated: %d", 
                                    wfId, wfEntryUpdated, sdrActivityUpdated);
                        }
                        
                        updResultTO.updatedRecs = updatedCount;
                        updResultTO.setGlobalMessages(new String[]{"Revive operation completed successfully"});
                        updResultTO.setValid(true);
                        
                        log.info("Revive batch was successful for %d records", updatedCount);
                        return updResultTO;
                        
                    } catch (Exception ex) {
                        log.error("Error in revive operation: %s", ex.getLocalizedMessage(), ex);
                        updResultTO.updatedRecs = 0;
                        updResultTO.setValid(false);
                        updResultTO.setGlobalMessages(new String[]{
                            "<b><font color=\"red\">Revive Failed</font>:</b><br/>" +
                            "Unexpected exception, please contact support"
                        });
                        return updResultTO;
                    }
                } else {
                    updResultTO.setGlobalMessages(new String[]{
                        "<b><font color=\"red\">Invalid Request</font>:</b><br/>" +
                        "No records provided, please contact support"
                    });
                    updResultTO.updatedRecs = 0;
                    updResultTO.setValid(false);
                    log.error("Invalid Request - No records provided for revive operation");
                    return updResultTO;
                }
            }
            // END OF REVIVE LOGIC
            
            else if (APPROVE.equals(updateType) || REJECT.equals(updateType)) {
                // Your existing approve/reject logic
                try {
                    log.info("Trying to " + updateType + " record with id: %s", idValue);
                    SdrActivity record = sdrActivityDAO.findById(new Long(idValue));
                    boolean opsRejectFlag = enableOpsReject(updateType, record);
                    
                    if (record == null) {
                        updResultTO.setGlobalMessages(new String[]{"Transfer processing failed"});
                        log.error("Could not find SdrActivity object");
                        throw new Exception("Transfer processing failed");
                    }
                    
                    if (REJECT.equals(updateType)) {
                        if (!ApprovalStatus.UNAPPROVED.equalsIgnoreCase(record.getOpsApproved()) && !opsRejectFlag) {
                            log.error("The Transfer is not in a state to " + updateType + ", Id %s Lynx Id %s", 
                                record.getId(), record.getLynxId());
                            throw new Exception("The Transfer is not in state to " + updateType + ", Id -> " + record.getId());
                        }
                    } else {
                        if (!ApprovalStatus.UNAPPROVED.equalsIgnoreCase(record.getOpsApproved())) {
                            log.error("The Transfer is not in a state to " + updateType + ", Id %s Lynx Id %s", 
                                record.getId(), record.getLynxId());
                            throw new Exception("The Transfer is not in state to " + updateType + ", Id -> " + record.getId());
                        }
                    }
                    
                    createSdrActivityObject(fieldIds, fieldValues, record);
                    record.setLastModified(new Date());
                    
                    if (opsRejectFlag) {
                        record.setDeliveryStatus(DeliveryStatus.OPS_REJECTED.toString());
                        log.info("Setting Delivery status to OPS_REJECTED: %s", idValue);
                    }
                    
                    sdrActivityDAO.store(record);
                    log.info("Save of Transfer successful for action " + updateType + " with id: %s", idValue);
                    
                } catch (Exception ex) {
                    log.error("Error while processing the " + updateType + ": %s", ex.getLocalizedMessage());
                    updResultTO.setGlobalMessages(new String[]{
                        "<b><font color=\"red\">" + updateType + " failed </font>:</b><br/>" +
                        "Unexpected exception, please contact support"
                    });
                    updResultTO.updatedRecs = 0;
                    updResultTO.setValid(false);
                    return updResultTO;
                }
            }
            else if (CashieringBlotterToolBar.APPROVE_ALL.equals(updateType) ||
                      CashieringBlotterToolBar.REJECT_ALL.equals(updateType)) {
                // Your existing approve all/reject all logic
                log.debug("Inside Approve All/Reject All");
                
                String userId = null;
                String userName = null;
                
                if (params.length != 3) {
                    throw new IllegalArgumentException("Expected 3 paramTOs for approve/reject all action");
                }
                
                if (USER_ID_PARAM.equals(params[1].getName())) {
                    userId = params[1].getValue();
                } else {
                    throw new IllegalArgumentException("Expected name of Params[1] is " + USER_ID_PARAM);
                }
                
                if (USER_NAME_PARAM.equals(params[2].getName())) {
                    userName = params[2].getValue();
                } else {
                    throw new IllegalArgumentException("Expected name of Params[2] is " + USER_NAME_PARAM);
                }
                
                int updateCount = 0;
                boolean isValid = true;
                
                if (fieldValues.length > 0) {
                    String actionStr = "";
                    String opsApproved = "";
                    
                    if (CashieringBlotterToolBar.APPROVE_ALL.equals(updateType)) {
                        actionStr = "Approve";
                        opsApproved = ApprovalStatus.APPROVED;
                    } else if (CashieringBlotterToolBar.REJECT_ALL.equals(updateType)) {
                        actionStr = "Reject";
                        opsApproved = ApprovalStatus.REJECTED;
                    }
                    
                    List<Long> lIds = new ArrayList<Long>();
                    for (String ids : fieldValues) {
                        lIds.add(Long.parseLong(ids));
                    }
                    
                    try {
                        log.info("Request to " + updateType + " %s records", fieldValues.length);
                        List<SdrActivity> records = sdrActivityDAO.findByIds(lIds);
                        
                        for (SdrActivity record : records) {
                            boolean opsRejectFlag = enableOpsReject(updateType, record);
                            
                            if (CashieringBlotterToolBar.REJECT_ALL.equals(updateType)) {
                                if (!ApprovalStatus.UNAPPROVED.equalsIgnoreCase(record.getOpsApproved()) && !opsRejectFlag) {
                                    log.error("The Transfer is not in a state to " + updateType + ", Id %s Lynx Id %s", 
                                        record.getId(), record.getLynxId());
                                    throw new Exception("The Transfer is not in state to " + updateType + ", Id -> " + record.getId());
                                }
                            } else {
                                if (!ApprovalStatus.UNAPPROVED.equalsIgnoreCase(record.getOpsApproved())) {
                                    log.error("The Transfer is not in a state to " + actionStr + ", Id %s Lynx Id %s", 
                                        record.getId(), record.getLynxId());
                                    throw new Exception("The Transfer is not in state to " + actionStr + ", Id -> " + record.getId());
                                }
                            }
                            
                            record.setOpsApproved(opsApproved);
                            record.setOpsApprover(userId);
                            record.setLastModified(new Date());
                            record.setLastModifiedUserId("SYSTEM");
                            
                            if (opsRejectFlag) {
                                record.setDeliveryStatus(DeliveryStatus.OPS_REJECTED.toString());
                            }
                            
                            log.info("Inside Approve all/Reject all by user " + userId + " for id %s", record.getId());
                        }
                        
                        sdrActivityDAO.store(records);
                        updResultTO.updatedRecs = fieldValues.length;
                        updResultTO.setGlobalMessages(new String[]{"Batch " + actionStr + " was successful"});
                        updResultTO.setValid(true);
                        log.info("Batch " + actionStr + " was successful");
                        return updResultTO;
                        
                    } catch (Exception ex) {
                        log.error("Error in batch " + actionStr + ": %s", ex.getLocalizedMessage());
                        updResultTO.updatedRecs = 0;
                        updResultTO.setValid(false);
                        updResultTO.setGlobalMessages(new String[]{
                            "<b><font color=\"red\">Batch " + actionStr + " Failed</font>:</b><br/>" +
                            "Unexpected exception, please contact support"
                        });
                        return updResultTO;
                    }
                } else {
                    updResultTO.setGlobalMessages(new String[]{
                        "<b><font color=\"red\">Invalid Request</font>:</b><br/>" +
                        "No records provided, please contact support"
                    });
                    updResultTO.updatedRecs = updateCount;
                    updResultTO.setValid(isValid);
                    log.error("Invalid Request - No records provided, please contact support");
                    return updResultTO;
                }
            }
            else if (SETTLE.equals(updateType)) {
                // Your existing settle logic
                log.info("Inside SETTLE action for id: %s", idValue);
                
                String userId = null;
                String userName = null;
                
                if (params.length != 3) {
                    throw new IllegalArgumentException("Expected 3 paramTOs for settle action");
                }
                
                if (USER_ID_PARAM.equals(params[1].getName())) {
                    userId = params[1].getValue();
                } else {
                    throw new IllegalArgumentException("Expected name of Params[1] is " + USER_ID_PARAM);
                }
                
                if (USER_NAME_PARAM.equals(params[2].getName())) {
                    userName = params[2].getValue();
                } else {
                    throw new IllegalArgumentException("Expected name of Params[2] is " + USER_NAME_PARAM);
                }
                
                if (fieldValues.length > 0) {
                    List<Long> idList = new ArrayList<Long>();
                    for (String id : fieldValues) {
                        idList.add(Long.parseLong(id));
                    }
                    
                    try {
                        log.info("Request to " + updateType + " %s records", fieldValues.length);
                        List<SdrActivity> records = sdrActivityDAO.findByIds(idList);
                        List<SdrAtsResponse> atsResponseList = new ArrayList<SdrAtsResponse>();
                        
                        for (SdrActivity record : records) {
                            record.setDeliveryStatus(DeliveryStatus.SETTLED.getCode());
                            record.setLastModified(new Date());
                            record.setLastModifiedUserId(userId);
                            
                            if (idValue != null) {
                                record.setDestinationRefId(idValue);
                            }
                            
                            log.info("setting Settled status by user " + userId + " for id %s", record.getId());
                            
                            // Make an entry in ATS Response table
                            SdrAtsResponse atsResponse = new SdrAtsResponse();
                            atsResponse.setAtsId(record.getAtsId());
                            atsResponse.setLynxId(record.getId());
                            atsResponse.setStatusCode(DeliveryStatus.SETTLED.getCode());
                            atsResponse.setStatusDescription(DeliveryStatus.SETTLED.getCode());
                            atsResponse.setResponseTime(new Date());
                            atsResponse.setProcessed(ProcessedFlag.UNPROCESSED.getCode());
                            atsResponse.setActive("Y");
                            atsResponse.setCreateDate(new Date());
                            atsResponse.setCreatedBy("SYSTEM");
                            atsResponse.setLastModified(new Date());
                            atsResponse.setLastModifiedUserId(userId);
                            atsResponseList.add(atsResponse);
                        }
                        
                        sdrActivityDAO.store(records);
                        sdrAtsResponseDAO.store(atsResponseList);
                        updResultTO.updatedRecs = fieldValues.length;
                        updResultTO.setGlobalMessages(new String[]{"Updated record(s) successfully"});
                        updResultTO.setValid(true);
                        log.info("Settle Batch was successful");
                        return updResultTO;
                        
                    } catch (Exception ex) {
                        log.error("Error while processing the " + updateType + ": %s", ex.getLocalizedMessage(), ex);
                        updResultTO.setGlobalMessages(new String[]{
                            "<b><font color=\"red\">" + updateType + " failed </font>:</b><br/>" +
                            "Unexpected exception, please contact support"
                        });
                        updResultTO.updatedRecs = 0;
                        updResultTO.setValid(false);
                        return updResultTO;
                    }
                }
            }
            else {
                throw new IllegalArgumentException("Expected name of Params[0] is " + UPDATE_TYPE);
            }
        }
    } else {
        return super.update(bizObjectName, idValue, fieldIds, fieldValues, params);
    }
    
    return updResultTO;
}
